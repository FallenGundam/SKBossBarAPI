#name: SKBossBarAPI
#version: v1.0.0
#required:  skript 2.6 , skript-reflect
#date: 2023/3/26



import:
	org.bukkit.Bukkit
	org.bukkit.NamespacedKey
	org.bukkit.boss.BarColor
	org.bukkit.boss.BossBar
	org.bukkit.boss.BarStyle
	org.bukkit.boss.BarFlag

	ch.njol.skript.Skript




plural expression all %string% type in bossbar [object]:
	return type: string
	get:
		if expr-1 = "color":
			loop ...BarColor.values():
				add loop-value.name() to {_result::*}
		else if expr-1 = "flag":
			loop ...BarFlag.values():
				add loop-value.name() to {_result::*}
		else if expr-1 = "style":
			loop ...BarStyle.values():
				add loop-value.name() to {_result::*}
		return {_result::*}
		
expression bossbar [object] by id %string%:
	return type: object
	get:
		set {_NamespacedKey} to new NamespacedKey("skript",bar_idformat(expr-1))
		return Bukkit.getBossBar({_NamespacedKey})
	delete:
		set {_NamespacedKey} to new NamespacedKey("skript",bar_idformat(expr-1))
		set {_bar} to Bukkit.getBossBar({_NamespacedKey})
		{_bar}.removeAll()
		Bukkit.removeBossBar({_bar}.getKey())

effect delete bossbar object %object%:
	trigger:
		expr-1.removeAll()
		Bukkit.removeBossBar(expr-1.getKey())

plural expression all [of] bossbar [object] [with id]:
	return type: string
	get:
		loop ...Bukkit.getBossBars():
			set {_bar} to loop-value
			if {_bar}.getKey().toString() contains "skript:":
				add {_bar}.getKey().toString().replace("skript:","") to {_list::*}
		return {_list::*}
	delete:
		BossBar_clearAll()

expression bossbar [object] %object% can visible:
	return type: boolean
	get:
		return expr-1.isVisible()
	set:
		expr-1.setVisible(change value)


expression bossbar [object] progress of %object%:
	return type: number
	get:
		return expr-1.getProgress()*100
	add:
		expr-1.setProgress(expr-1.getProgress() + change value/100)
	remove:
		if expr-1.getProgress() - (change value/100) >= 0:
			expr-1.setProgress(expr-1.getProgress() - change value/100)
		else:
			Skript.error("SKBossBarAPI >> &cBossBar progress can't be Negative number") 
	set:
		if (change value/100) >= 0:
			expr-1.setProgress(change value/100)
		else:
			Skript.error("SKBossBarAPI >> &cBossBar progress can't be Negative number") 
			
plural expression bossbar [object] players of %object%:
	return type: player
	get:
		return ...expr-1.getPlayers()
	add:
		expr-1.addPlayer(change values)
	remove:
		expr-1.removePlayer(change values)
	delete:
		loop ...expr-1.getPlayers():
			expr-1.removePlayer(loop-value)

expression bossbar [object] color of %object%:
	return type: string
	get:
		return expr-1.getColor().toString()
	set:
		if all "color" type in bossbar doesn't contain change value.toUpperCase():
			Skript.error("SKBossBarAPI >> invalid color type!")
			stop trigger
		expr-1.setColor(BarColor.valueOf(change value.toUpperCase()))

expression bossbar [object] style of %object%:
	return type: string
	get:
		return expr-1.getStyle().toString()
	set:
		if all "style" type in bossbar doesn't contain change value.toUpperCase():
			Skript.error("SKBossBarAPI >> invalid style type!")
			stop trigger
		expr-1.setStyle(BarStyle.valueOf(change value.toUpperCase()))

plural expression bossbar [object] flags of %object%:
	return type: string
	get:
		loop ...BarFlag.values():
			set {_temp} to loop-value
			if expr-1.hasFlag({_temp}):
				add {_temp}.toString() to {_list::*}
		return {_list::*}
	add:
		expr-1.addFlag(BarFlag.valueOf(change value.toUpperCase()))
	remove:
		expr-1.removeFlag(BarFlag.valueOf(change value.toUpperCase()))

expression bossbar [object] title of %object%:
	return type: string
	get:
		return expr-1.getTitle()
	set:
		expr-1.setTitle(change value)


function BossBar_clearAll():
	# set {_bars} to Bukkit.getBossBars()
	# while {_bars}.hasNext():
	# 	add {_bars}.next() to {_bar::*}
	loop ...Bukkit.getBossBars():
		set {_bar} to loop-value
		if {_bar}.getKey().toString() contains "skript:":
			{_bar}.removeAll()
			Bukkit.removeBossBar({_bar}.getKey())

function BossBar_isExists(id:string) :: boolean:
	set {_id} to bar_idformat({_id})
	set {_NamespacedKey} to new NamespacedKey("skript",{_id})
	loop ...Bukkit.getBossBars():
		set {_element} to loop-value
		if {_element}.getKey() = {_NamespacedKey}:
			return true
	return false

function BossBar_create(id:string,title:string = "example",color:string = "red",style:string = "SOLID") :: object:
	if BossBar_isExists({_id}) = true:
		Skript.error("&cSKBossBarAPI &7>> &6BossBar id:&e%{_id}% &6is exists !")
		stop trigger
	if all "color" type in bossbar doesn't contain {_color}.toUpperCase():
		Skript.error("&cSKBossBarAPI &7>> &6invalid color type!")
		stop trigger
	if all "style" type in bossbar doesn't contain {_style}.toUpperCase():
		Skript.error("&cSKBossBarAPI &7>> &6invalid style type!")
		stop trigger
	set {_id} to bar_idformat({_id})
	set {_NamespacedKey} to new NamespacedKey("skript",{_id})
	set {_bar} to Bukkit.createBossBar({_NamespacedKey},{_title},BarColor.valueOf({_color}.toUpperCase()),BarStyle.valueOf({_style}.toUpperCase()))
	{_bar}.show()
	return {_bar}

function bar_idformat(id:string) :: string:
	set {_id} to uncolored {_id}
	set {_id} to {_id}.toLowerCase()
	return {_id}.trim()


on skript unload:
	BossBar_clearAll()
	
